[{"/Users/maomao/react-t-d/src/index.js":"1","/Users/maomao/react-t-d/src/reportWebVitals.js":"2","/Users/maomao/react-t-d/src/App.js":"3"},{"size":535,"mtime":1686366520433,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1686366520439,"results":"6","hashOfConfig":"5"},{"size":4937,"mtime":1686501717122,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vtl7o0",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/Users/maomao/react-t-d/src/index.js",[],[],"/Users/maomao/react-t-d/src/reportWebVitals.js",[],[],"/Users/maomao/react-t-d/src/App.js",["18","19","20","21","22"],[],"import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nconst calcData = [\n  { id: \"clear\", value: \"AC\" },\n  { id: \"divide\", value: \"/\" },\n  { id: \"multiply\", value: \"x\" },\n  { id: \"seven\", value: 7 },\n  { id: \"eight\", value: 8 },\n  { id: \"nine\", value: 9 },\n  { id: \"subtract\", value: \"-\" },\n  { id: \"four\", value: 4 },\n  { id: \"five\", value: 5 },\n  { id: \"six\", value: 6 },\n  { id: \"add\", value: \"+\" },\n  { id: \"one\", value: 1 },\n  { id: \"two\", value: 2 },\n  { id: \"three\", value: 3 },\n  { id: \"equals\", value: \"=\" },\n  { id: \"zero\", value: 0 },\n  { id: \"decimal\", value: \".\" },\n];\n\nconst operators = [\"AC\", \"/\", \"x\", \"+\", \"-\", \"=\"];\n\nconst numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst Display = ({ input, output }) => (\n  <div className=\"output\">\n    <span className=\"result\">{output}</span>\n    <span id=\"display\" className=\"input\">{input}</span>\n  </div>\n);\n\nconst Key = ({ keyData: { id, value }, handleInput }) => (\n  <button id={id} onClick={() => handleInput(value)}>\n    {value}\n  </button>\n);\n\nconst Keyboard = ({ handleInput }) => (\n  <div className=\"keys\">\n    {calcData.map((key) => (\n      <Key key={key.id} keyData={key} handleInput={handleInput} />\n    ))}\n  </div>\n);\n\nconst App = () => {\nconst [input, setInput] = React.useState(\"0\");\n  const [output, setOutput] = React.useState(\"\");\n  const [calculatorData, setCalculatorData] = React.useState(\"\");\n\n  const handleSubmit = () => {\n    console.log({ calculatorData });\n\n    const total = eval(calculatorData);\n    setInput(total);\n    setOutput(`${total} = ${total}`);\n    setCalculatorData(`${total}`);\n  };\n\n  const handleClear = () => {\n    setInput(\"0\");\n    setCalculatorData(\"\");\n  };\n\n  const handleNumbers = (value) => {\n    if (!calculatorData.length) {\n      setInput(`${value}`);\n      setCalculatorData(`${value}`);\n    } else {\n      if (value === 0 && (calculatorData === \"0\" || input === \"0\")) {\n        setCalculatorData(`${calculatorData}`);\n      } else {\n        const lastChat = calculatorData.charAt(calculatorData.length - 1);\n        const isLastChatOperator =\n          lastChat === \"*\" || operators.includes(lastChat);\n\n        setInput(isLastChatOperator ? `${value}` : `${input}${value}`);\n        setCalculatorData(`${calculatorData}${value}`);\n      }\n    }\n  };\n\n  const dotOperator = () => {\n    const lastChat = calculatorData.charAt(calculatorData.length - 1);\n    if (!calculatorData.length) {\n      setInput(\"0.\");\n      setCalculatorData(\"0.\");\n    } else {\n      if (lastChat === \"*\" || operators.includes(lastChat)) {\n        setInput(\"0.\");\n        setCalculatorData(`${calculatorData} 0.`);\n      } else {\n        setInput(\n          lastChat === \".\" || input.includes(\".\") ? `${input}` : `${input}.`\n        );\n        const formattedValue =\n          lastChat === \".\" || input.includes(\".\")\n            ? `${calculatorData}`\n            : `${calculatorData}.`;\n        setCalculatorData(formattedValue);\n      }\n    }\n  };\n\n\n  const handleOperators = (value) => {\n    if (calculatorData.length) {\n      setInput(`${value}`);\n      const beforeLastChat = calculatorData.charAt(calculatorData.length - 2);\n\n      const beforeLastChatIsOperator =\n        operators.includes(beforeLastChat) || beforeLastChat === \"*\";\n\n      const lastChat = calculatorData.charAt(calculatorData.length - 1);\n      \n      const lastChatIsOperator = operators.includes(lastChat) || lastChat === \"*\";\n      \n      const validOp = value === \"x\" ? \"*\" : value;\n      if (\n        (lastChatIsOperator && value !== \"-\") ||\n        beforeLastChatIsOperator && lastChatIsOperator\n      ) {\n        if (beforeLastChatIsOperator) {\n          const updatedValue = `${calculatorData.substring(\n            0,\n            calculatorData.length - 2\n          )}${value}`;\n          setCalculatorData(updatedValue);\n        } else {\n          setCalculatorData(`${calculatorData.substring(0, calculatorData.length - 1)}${validOp}`);\n        }\n      } else {\n        setCalculatorData(`${calculatorData}${validOp}`);\n      }\n    }\n  };\n\n  const handleInput = (value) => {\n    const number = numbers.find((num) => num === value);\n    const operator = operators.find((op) => op === value);\n\n    switch (value) {\n      case \"=\":\n        handleSubmit();\n        break;\n      case \"AC\":\n        handleClear();\n        break;\n      case number:\n        handleNumbers(value);\n        break;\n      case \".\":\n        dotOperator(value);\n        break;\n      case operator:\n        handleOperators(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleOutput = () => {\n    setOutput(calculatorData);\n  };\n\n  React.useEffect(() => {\n    handleOutput();\n  }, [calculatorData]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"calculator\">\n        <Display input={input} output={output} />\n        <Keyboard handleInput={handleInput} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n",{"ruleId":"23","severity":1,"message":"24","line":3,"column":8,"nodeType":"25","messageId":"26","endLine":3,"endColumn":16},{"ruleId":"27","severity":1,"message":"28","line":57,"column":19,"nodeType":"29","messageId":"30","endLine":57,"endColumn":23},{"ruleId":"31","severity":1,"message":"32","line":123,"column":47,"nodeType":"33","messageId":"34","endLine":123,"endColumn":49},{"ruleId":"31","severity":1,"message":"32","line":124,"column":34,"nodeType":"33","messageId":"34","endLine":124,"endColumn":36},{"ruleId":"35","severity":1,"message":"36","line":172,"column":6,"nodeType":"37","endLine":172,"endColumn":22,"suggestions":"38"},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-eval","eval can be harmful.","CallExpression","unexpected","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'handleOutput'. Either include it or remove the dependency array.","ArrayExpression",["39"],{"desc":"40","fix":"41"},"Update the dependencies array to be: [calculatorData, handleOutput]",{"range":"42","text":"43"},[4685,4701],"[calculatorData, handleOutput]"]